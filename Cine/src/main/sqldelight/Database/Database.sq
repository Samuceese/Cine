--Creacion de la tabla ButacaEntity -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
CREATE TABLE ButacaEntity(
    id TEXT PRIMARY KEY NOT NULL,
    estado TEXT NOT NULL,
    actividad TEXT NOT NULL,
    tipo TEXT NOT NULL,
    precio INTEGER NOT NULL
);

--Operaciones CRUD de ButacaEntity -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-

selectAllButacaEntity:
SELECT * FROM ButacaEntity;

selectButacaEntityById:
SELECT * FROM ButacaEntity WHERE id = ?;

insertButacaEntity:
INSERT INTO ButacaEntity(id,estado,actividad,tipo,precio) VALUES (?,?,?,?,?);

updateButacaEntity:
UPDATE ButacaEntity SET id=?, estado=?, actividad=?, tipo= ?, precio= ?;

deleteButacaEntityById:
DELETE FROM ButacaEntity WHERE id= ?;

deleteAllButacaEntity:
DELETE FROM ButacaEntity;


-- Tabla de Socio
CREATE TABLE IF NOT EXISTS SocioEntity (
      id INTEGER PRIMARY KEY,
      nombre TEXT NOT NULL,
      is_deleted INTEGER NOT NULL DEFAULT 0
);

-- Operaciones CRUD para la tabla de Clientes
removeAllSocio:
DELETE FROM SocioEntity;

selectAllSocio:
SELECT * FROM SocioEntity;

selectSocioById:
SELECT * FROM SocioEntity WHERE id = ?;

selectAllSocioByIsDeleted:
SELECT * FROM SocioEntity WHERE is_deleted = ?;

selectSocioLastInserted:
SELECT * FROM SocioEntity WHERE id = last_insert_rowid();

insertSocio:
INSERT INTO SocioEntity (id, nombre) VALUES (?, ?);

updateCliente:
UPDATE SocioEntity SET nombre = ? WHERE id = ?;

deleteCliente:
DELETE FROM SocioEntity WHERE id = ?;



--ComplementoEntity
CREATE TABLE IF NOT EXISTS ComplementoEntity(
    tipo TEXT NOT NULL ,
    id INTEGER PRIMARY KEY NOT NULL,
    nombre TEXT NOT NULL,
    precio INTEGER NOT NULL
);
-- Crud ComplementoEntity
getAllComplementoEntity:
SELECT * FROM ComplementoEntity;

getByIdComplementoEntity:
SELECT * FROM ComplementoEntity WHERE id = ?;

getComplementoByTipo:
SELECT * FROM ComplementoEntity WHERE tipo=?;

updateComplementoEntity:
UPDATE ComplementoEntity SET id=?, nombre=?, precio=?, tipo=?;

deleteAllComplementoEntity:
DELETE FROM ComplementoEntity;

insertComplemento:
INSERT INTO ComplementoEntity(tipo,nombre,precio) VALUES(?,?,?);

deleteComplementoByID:
DELETE FROM ComplementoEntity WHERE id=?;



-- Tabla de Ventas
CREATE TABLE IF NOT EXISTS VentaEntity (
    id TEXT PRIMARY KEY,
    socio_id INTEGER NOT NULL REFERENCES SocioEntity(id),
    total REAL NOT NULL,
    createdAt TEXT NOT NULL,
    updatedAt TEXT NOT NULL,
    isDeleted INTEGER NOT NULL DEFAULT 0
);
-- Operaciones CRUD para la tabla de Ventas
removeAllVenta:
DELETE FROM VentaEntity;

selectAllVenta:
SELECT * FROM VentaEntity;

selectVentaById:
SELECT * FROM VentaEntity WHERE id = ?;

existsVenta:
SELECT COUNT(*) > 0 AS es_mayor_cero FROM VentaEntity WHERE id = ?;

selectAllVentaByIsDeleted:
SELECT * FROM VentaEntity WHERE isDeleted = ?;

selectVentaLastInserted:
SELECT * FROM VentaEntity WHERE id = last_insert_rowid();

insertVenta:
INSERT INTO VentaEntity (id, socio_id, total, createdAt, updatedAt) VALUES (?, ?, ?, ?, ?);

updateVenta:
UPDATE VentaEntity SET socio_id = ?, total = ?, updatedAt = ?, isDeleted = ? WHERE id = ?;

deleteVenta:
DELETE FROM VentaEntity WHERE id = ?;



-- Tabla de Lineas de Ventas
CREATE TABLE IF NOT EXISTS LineaVentaEntity (
     id TEXT PRIMARY KEY,
     venta_id TEXT NOT NULL REFERENCES VentaEntity(id),
     complementoId INTEGER NOT NULL REFERENCES ComplementoEntity(id),
     cantidad INTEGER NOT NULL,
     precio REAL NOT NULL,
     createdAt TEXT NOT NULL,
     updatedAt TEXT NOT NULL,
     isDeleted INTEGER NOT NULL DEFAULT 0
);

-- Operaciones CRUD para la tabla de Lineas de Ventas
removeAllLineaVenta:
DELETE FROM LineaVentaEntity;

selectAllLineaVenta:
SELECT * FROM LineaVentaEntity;

selectLineaVentaById:
SELECT * FROM LineaVentaEntity WHERE id = ?;

selectAllLineaVentaByVentaId:
SELECT * FROM LineaVentaEntity WHERE venta_id = ?;

selectAllLineaVentaByIsDeleted:
SELECT * FROM LineaVentaEntity WHERE isDeleted = ?;

selectLineaVentaLastInserted:
SELECT * FROM LineaVentaEntity WHERE id = last_insert_rowid();

insertLineaVenta:
INSERT INTO LineaVentaEntity (id, venta_id, complementoId, cantidad, precio, createdAt, updatedAt) VALUES (?, ?, ?, ?, ?, ?, ?);

updateLineaVenta:
UPDATE LineaVentaEntity SET venta_id = ?, complementoId = ?, cantidad = ?, precio = ?, updatedAt = ?, isDeleted = ? WHERE id = ?;

deleteLineaVenta:
DELETE FROM LineaVentaEntity WHERE id = ?;